#!/usr/bin/env ruby
#
# Read several bib files and merge into one
#
# check the values of:
#   date-written-via-bibdump
#   date-modified
#

$:.unshift(File.dirname(__FILE__))

require 'bib_library.rb'
require 'papers_library.rb'
require 'getoptlong'
require 'kconv'
require 'date'

$stdout.set_encoding("EUC-JP", "UTF-8")

#
# main
#

if __FILE__ == $0
  require 'optparse'

  opts = {                      # default options
    :mode => "plain",
    :draft => false,
    :encoding => "UTF-8",
    :output_encoding => "UTF-8",
    :key_file => "",	# if it's null string, try to generate file by basename
    :bib_dir => "./bib",
    :force => false,
    :timestamp => true,
    :add => false,
    :overwrite => false,
    :group => false,
    :dep_dump => false
  }

  ARGV.options do |o|
    o.banner = "ruby #{$0} [options] BIB_File bib_keys..."
    o.separator "Options:"
    o.on("--utf-8", "-u", "Set both i/o encoding to UTF-8") {|x| opts[:encoding] = "UTF-8" ; opts[:output_encoding] = opts[:encoding] }
    o.on("--euc-jp", "-e", "Set both i/o encoding to EUC-JP") {|x| opts[:encoding] = "EUC-JP" ; opts[:output_encoding] = opts[:encoding] }
    o.on("--sjis", "-s", "Set both i/o encoding to Shift_JIS") {|x| opts[:encoding] = "Shift_JIS" ; opts[:output_encoding] = opts[:encoding] }

    o.on("--output-utf-8", "Set output encoding to UTF-8") {|x| opts[:output_encoding] = "UTF-8" }
    o.on("--output-euc-jp", "Set output encoding to EUC-JP") {|x| opts[:output_encoding] = "EUC-JP" }
    o.on("--output-sjis", "Set output encoding to Shift_JIS") {|x| opts[:output_encoding] = "Shift_JIS" }

    o.on("--bib-dir", "-B DIR", "Set bib dir (currently ./bib)") {|x| opts[:bib_dir] = x }

    o.on("--force", "-f", "Force to overwrite files") {|x| opts[:force] = true }
    o.on("--no-time-stamp", "-t", "don't add bibdump date") {|x| opts[:timestamp] = false }
    o.on("--add", "-a", "Add to primary if missing") {|x| opts[:add] = true }
    o.on("--overwrite", "-o", "Do overwrite if needed") {|x| opts[:overwrite] = true }
    o.on("--dump-mismatch", "-d", "Dump mismatched entries") {|x| opts[:dump_mismatch] = true }

    o.on("--group GROUP", "-G GROUP", "Configure group mode") {|x| opts[:group] = x }

    o.on("--dep-dump", "-p", "Dump dependencies") {|x| opts[:dep_dump] = true }

    o.parse!
  end


  if ARGV.size >= 1
    if opts[:dep_dump] == true
      blib = BibLibrary.new(nil, opts)
      ARGV.each do |f|
        bibfile = blib.mkbibpath(f)
        if bibfile == nil
          STDERR.puts "#{f} not found"
        else
          puts bibfile
        end
      end
    else
      blib = BibLibrary.new(ARGV.shift, opts)
      ARGV.each do |f|
        bibfile = blib.mkbibpath(f)
        if bibfile == nil
          STDERR.puts "#{f} not found"
        else
          new_blib = BibLibrary.new(bibfile, opts)
          blib.merge(new_blib)
        end
      end
      blib.out(STDOUT)
    end
  end
end
